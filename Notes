VPN forward proxy
==========
Server is not aware that client is using VPN. Client is aware of VPN
Traffic restrict, traffic monitoring
Geolocation hiding
Anonymous client  identity
Access private network/files

Reverse proxy
===========
Client is not aware of proxy. Server is aware of proxy.
Backend applications are behind reverse proxy servers for security and queing
Cache servers

Record types
=============
A --> points to IP address
CNAME --> points to another domain
MX --> mail records (info@joindevops.com)
TXT --> Domain ownership validaton purpose
NS --> nameservers
SOA --> who is the authority of this domain



inode, symlink/softlink and hardlink

what is inode?

inode stores the file type(file or folder), permissions, ownership, file size, timestamp, disk location(memory location)

lrwxrwxrwx  1 root root    11 Dec 26 03:10 DbConfig1.js -> DbConfig.js
l represents link file

symlink is like shortcut it points to the original file. symlink inode and actual file inode is different. symlink breaks when actual file is deleted. symlink can be created to folders/directories

hardlink inode is same as actual file. hardlink is useful for backup of the file. if original file is deleted hardlink remains same. we can't create hardlinks to folders/directories


HTTP Methods and status codes
============================
CRUD

GET --> getting/read from server
POST --> posting/create the information
{
	amount: "200", 
	desc: "travel"
}
PUT --> Update the information
DELETE --> Delete the information

100 == 1XX == Informational codes
200 == 2XX == Success status codes
300 == 3XX == Redirectional
400 == 4XX == Client side error
500 == 5XX == Server side error

backend.daws82s.onine --> 404 --> NOTFOUND --> Client side error

403 --> Forbidden --> You dont have access to that
401 --> Unauthorized --> you should login
405 --> HTTP POST, If you use GET --> Method not allowed
400 --> bad request --> check the payload data once again

500 --> Internal Server Error --> Server side error
502 --> Bad Gateway --> Frontend not able to connect backend
503 --> Service temporarily unavailable


Shell Scripting
=================
if you keep all your commands in a single file and execute that file --> Shell Scripting

native linux scripting --> Linux/Shell commands


Linux Server --> I need to fetch some info from AWS Cloud --> Python


Git --> Concept
GitHub
Gitlab
Bitbucket
azure repos
AWS Code commit

git repos --> Storing code

1. creation of repo
2. clone repo to our laptop
git clone https://github.com/daws-78s/shell-script/blob/main/06-array.sh
3. we develop code
4. select some editor. vscode editor. visual studio code editor. free editor
5. add code to staging area

git add <file-name>
git add . --> all files will be added to staging area

6. commit to local repo

git commit -m "message"

7. git push oigin main


Version Control
================
History of changes
Need to maintain multiple versions --> I need to track the changes --> Why I changed? When I changed? Who changed?

20-DEC-2024 We deployed app in prodction
21-DEC-2024 there is issue

19-DEC-2024 --> restore to this version


1. variables
2. data types
3. conditions
4. loops
5. functions


integer, float, boolean, string, array, arraylist, map, etc..

integer --> number
float --> decimal number
boolean --> true/false
string --> text
array --> (devops, aws, docker)
arraylist --> [devops, aws, docker]
map --> name: devops, duration: 120hrs


Disadvantages of shell
======================
Error Handling
Not idempotent
Homogenous --> only works for a particular distro
Not scalable to many servers
Password security
syntax is not easy


IaaC --> Infra as a code

version control --> you can version control your infra. expense-infra-1.0 expense-infra-2.0
restore if something goes wrong --> easy to restore if something goes wrong
Consistent infra --> you can create same infra across all environments
Inventory management --> you can understand the resources by seeing terraform files
dependency management --> terraform can understand the dependency between resources. First it will create dependencies and then actual resources
code reusability --> terraform modules, you can create similar infra for any number of projects using modules
Cost --> automation of CRUD --> we can save costs
state management
declarative --> easy syntax
Git --> you can review code before apply